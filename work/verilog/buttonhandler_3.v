/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module buttonHandler_3 (
    input enter,
    input btntop,
    input btndown,
    input btnleft,
    input btnright,
    input clk,
    input rst,
    input button_rst,
    output reg [5:0] out,
    output reg debug
  );
  
  
  
  reg [5:0] M_button_d, M_button_q = 6'h18;
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_11 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_button_cond_out;
  reg [1-1:0] M_button_cond_in;
  button_conditioner_12 button_cond (
    .clk(clk),
    .in(M_button_cond_in),
    .out(M_button_cond_out)
  );
  wire [1-1:0] M_edge_detector1_out;
  reg [1-1:0] M_edge_detector1_in;
  edge_detector_11 edge_detector1 (
    .clk(clk),
    .in(M_edge_detector1_in),
    .out(M_edge_detector1_out)
  );
  wire [1-1:0] M_button_cond1_out;
  reg [1-1:0] M_button_cond1_in;
  button_conditioner_12 button_cond1 (
    .clk(clk),
    .in(M_button_cond1_in),
    .out(M_button_cond1_out)
  );
  wire [1-1:0] M_edge_detector2_out;
  reg [1-1:0] M_edge_detector2_in;
  edge_detector_11 edge_detector2 (
    .clk(clk),
    .in(M_edge_detector2_in),
    .out(M_edge_detector2_out)
  );
  wire [1-1:0] M_button_cond2_out;
  reg [1-1:0] M_button_cond2_in;
  button_conditioner_12 button_cond2 (
    .clk(clk),
    .in(M_button_cond2_in),
    .out(M_button_cond2_out)
  );
  wire [1-1:0] M_edge_detector3_out;
  reg [1-1:0] M_edge_detector3_in;
  edge_detector_11 edge_detector3 (
    .clk(clk),
    .in(M_edge_detector3_in),
    .out(M_edge_detector3_out)
  );
  wire [1-1:0] M_button_cond3_out;
  reg [1-1:0] M_button_cond3_in;
  button_conditioner_12 button_cond3 (
    .clk(clk),
    .in(M_button_cond3_in),
    .out(M_button_cond3_out)
  );
  wire [1-1:0] M_edge_detector4_out;
  reg [1-1:0] M_edge_detector4_in;
  edge_detector_11 edge_detector4 (
    .clk(clk),
    .in(M_edge_detector4_in),
    .out(M_edge_detector4_out)
  );
  wire [1-1:0] M_button_cond4_out;
  reg [1-1:0] M_button_cond4_in;
  button_conditioner_12 button_cond4 (
    .clk(clk),
    .in(M_button_cond4_in),
    .out(M_button_cond4_out)
  );
  
  always @* begin
    M_button_d = M_button_q;
    
    M_button_cond_in = enter;
    M_edge_detector_in = M_button_cond_out;
    M_button_cond1_in = btntop;
    M_edge_detector1_in = M_button_cond1_out;
    M_button_cond2_in = btndown;
    M_edge_detector2_in = M_button_cond2_out;
    M_button_cond3_in = btnleft;
    M_edge_detector3_in = M_button_cond3_out;
    M_button_cond4_in = btnright;
    M_edge_detector4_in = M_button_cond4_out;
    debug = 1'h0;
    if (M_edge_detector1_out == 1'h1) begin
      M_button_d = 6'h25;
      debug = 1'h1;
    end else begin
      if (M_edge_detector2_out == 1'h1) begin
        M_button_d = 6'h2d;
      end else begin
        if (M_edge_detector3_out == 1'h1) begin
          M_button_d = 6'h21;
        end else begin
          if (M_edge_detector4_out == 1'h1) begin
            M_button_d = 6'h29;
          end else begin
            if (M_edge_detector_out == 1'h1) begin
              M_button_d = 6'h30;
            end else begin
              M_button_d = M_button_q;
            end
          end
        end
      end
    end
    out = M_button_q;
  end
  
  always @(posedge clk) begin
    if (button_rst == 1'b1) begin
      M_button_q <= 6'h18;
    end else begin
      M_button_q <= M_button_d;
    end
  end
  
endmodule
